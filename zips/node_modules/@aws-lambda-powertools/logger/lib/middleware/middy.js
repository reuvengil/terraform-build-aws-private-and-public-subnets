"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectLambdaContext = void 0;
const Logger_1 = require("../Logger");
const middleware_1 = require("@aws-lambda-powertools/commons/lib/middleware");
/**
 * A middy middleware that helps emitting CloudWatch EMF metrics in your logs.
 *
 * Using this middleware on your handler function will automatically add context information to logs, as well as optionally log the event and clear attributes set during the invocation.
 *
 * @example
 * ```typescript
 * import { Logger, injectLambdaContext } from '@aws-lambda-powertools/logger';
 * import middy from '@middy/core';
 *
 *
 * const logger = new Logger();
 *
 * const lambdaHandler = async (_event: any, _context: any) => {
 *     logger.info('This is an INFO log with some context');
 * };
 *
 * export const handler = middy(lambdaHandler).use(injectLambdaContext(logger));
 * ```
 *
 * @param target - The Logger instance(s) to use for logging
 * @param options - (_optional_) Options for the middleware
 * @returns - The middy middleware object
 */
const injectLambdaContext = (target, options) => {
    const loggers = target instanceof Array ? target : [target];
    const persistentAttributes = [];
    const isClearState = options && options.clearState === true;
    /**
     * Set the cleanup function to be called in case other middlewares return early.
     *
     * @param request - The request object
     */
    const setCleanupFunction = (request) => {
        request.internal = {
            ...request.internal,
            [middleware_1.LOGGER_KEY]: injectLambdaContextAfterOrOnError,
        };
    };
    const injectLambdaContextBefore = async (request) => {
        loggers.forEach((logger, index) => {
            if (isClearState) {
                persistentAttributes[index] = {
                    ...logger.getPersistentLogAttributes(),
                };
                setCleanupFunction(request);
            }
            Logger_1.Logger.injectLambdaContextBefore(logger, request.event, request.context, options);
        });
    };
    const injectLambdaContextAfterOrOnError = async () => {
        if (isClearState) {
            loggers.forEach((logger, index) => {
                Logger_1.Logger.injectLambdaContextAfterOrOnError(logger, persistentAttributes[index], options);
            });
        }
    };
    return {
        before: injectLambdaContextBefore,
        after: injectLambdaContextAfterOrOnError,
        onError: injectLambdaContextAfterOrOnError,
    };
};
exports.injectLambdaContext = injectLambdaContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9taWRkeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBbUM7QUFFbkMsOEVBQTJFO0FBTTNFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVCRztBQUNILE1BQU0sbUJBQW1CLEdBQUcsQ0FDMUIsTUFBeUIsRUFDekIsT0FBd0IsRUFDTCxFQUFFO0lBQ3JCLE1BQU0sT0FBTyxHQUFHLE1BQU0sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxNQUFNLG9CQUFvQixHQUFvQixFQUFFLENBQUM7SUFDakQsTUFBTSxZQUFZLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDO0lBRTVEOzs7O09BSUc7SUFDSCxNQUFNLGtCQUFrQixHQUFHLENBQUMsT0FBeUIsRUFBUSxFQUFFO1FBQzdELE9BQU8sQ0FBQyxRQUFRLEdBQUc7WUFDakIsR0FBRyxPQUFPLENBQUMsUUFBUTtZQUNuQixDQUFDLHVCQUFVLENBQUMsRUFBRSxpQ0FBaUM7U0FDaEQsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLE1BQU0seUJBQXlCLEdBQUcsS0FBSyxFQUNyQyxPQUF5QixFQUNWLEVBQUU7UUFDakIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQWMsRUFBRSxLQUFhLEVBQUUsRUFBRTtZQUNoRCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEdBQUc7b0JBQzVCLEdBQUcsTUFBTSxDQUFDLDBCQUEwQixFQUFFO2lCQUN2QyxDQUFDO2dCQUVGLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzdCO1lBQ0QsZUFBTSxDQUFDLHlCQUF5QixDQUM5QixNQUFNLEVBQ04sT0FBTyxDQUFDLEtBQUssRUFDYixPQUFPLENBQUMsT0FBTyxFQUNmLE9BQU8sQ0FDUixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRixNQUFNLGlDQUFpQyxHQUFHLEtBQUssSUFBbUIsRUFBRTtRQUNsRSxJQUFJLFlBQVksRUFBRTtZQUNoQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBYyxFQUFFLEtBQWEsRUFBRSxFQUFFO2dCQUNoRCxlQUFNLENBQUMsaUNBQWlDLENBQ3RDLE1BQU0sRUFDTixvQkFBb0IsQ0FBQyxLQUFLLENBQUMsRUFDM0IsT0FBTyxDQUNSLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLE1BQU0sRUFBRSx5QkFBeUI7UUFDakMsS0FBSyxFQUFFLGlDQUFpQztRQUN4QyxPQUFPLEVBQUUsaUNBQWlDO0tBQzNDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFTyxrREFBbUIifQ==