"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogFormatter = void 0;
/**
 * Typeguard to monkey patch Error to add a cause property.
 *
 * This is needed because the `cause` property was added in Node 16.x.
 * Since we want to be able to format errors in Node 14.x, we need to
 * add this property ourselves. We can remove this once we drop support
 * for Node 14.x.
 *
 * @see 1361
 * @see https://nodejs.org/api/errors.html#errors_error_cause
 */
const isErrorWithCause = (error) => {
    return 'cause' in error;
};
/**
 * This class defines and implements common methods for the formatting of log attributes.
 *
 * @class
 * @abstract
 * @implements {LogFormatterInterface}
 */
class LogFormatter {
    /**
     * It formats a given Error parameter.
     *
     * @param {Error} error
     * @returns {LogAttributes}
     */
    formatError(error) {
        return {
            name: error.name,
            location: this.getCodeLocation(error.stack),
            message: error.message,
            stack: error.stack,
            cause: isErrorWithCause(error)
                ? error.cause instanceof Error
                    ? this.formatError(error.cause)
                    : error.cause
                : undefined,
        };
    }
    /**
     * It formats a date into a string in simplified extended ISO format (ISO 8601).
     *
     * @param {Date} now
     * @returns {string}
     */
    formatTimestamp(now) {
        return now.toISOString();
    }
    /**
     * It returns a string containing the location of an error, given a particular stack trace.
     *
     * @param stack
     * @returns {string}
     */
    getCodeLocation(stack) {
        if (!stack) {
            return '';
        }
        const stackLines = stack.split('\n');
        const regex = /\((.*):(\d+):(\d+)\)\\?$/;
        let i;
        for (i = 0; i < stackLines.length; i++) {
            const match = regex.exec(stackLines[i]);
            if (Array.isArray(match)) {
                return `${match[1]}:${Number(match[2])}`;
            }
        }
        return '';
    }
}
exports.LogFormatter = LogFormatter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nRm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zvcm1hdHRlci9Mb2dGb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0E7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sZ0JBQWdCLEdBQUcsQ0FDdkIsS0FBWSxFQUN5QixFQUFFO0lBQ3ZDLE9BQU8sT0FBTyxJQUFJLEtBQUssQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDSCxNQUFlLFlBQVk7SUFXekI7Ozs7O09BS0c7SUFDSSxXQUFXLENBQUMsS0FBWTtRQUM3QixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLFFBQVEsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDM0MsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixLQUFLLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDO2dCQUM1QixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssWUFBWSxLQUFLO29CQUM1QixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO29CQUMvQixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUs7Z0JBQ2YsQ0FBQyxDQUFDLFNBQVM7U0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksZUFBZSxDQUFDLEdBQVM7UUFDOUIsT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksZUFBZSxDQUFDLEtBQWM7UUFDbkMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLDBCQUEwQixDQUFDO1FBRXpDLElBQUksQ0FBQyxDQUFDO1FBQ04sS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFeEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN4QixPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQzFDO1NBQ0Y7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Q0FDRjtBQUVRLG9DQUFZIn0=